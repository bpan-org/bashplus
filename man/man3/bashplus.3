.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "STDIN 1"
.TH "bashplus" 3 "2022-10-18" "md2man v0.1.0" "A Collection of Useful Bash Functions"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "BASHPLUS"
.IX Header "BASHPLUS"
A Collection of Useful Bash Functions
.SS "\s-1SYNOPSIS\s0"
.IX Subsection "SYNOPSIS"
.Vb 2
\&    source "$PROJECT_ROOT/.bpan/lib/bpan.bash" \-\-
\&    bpan:source bashplus
\&
\&    +on\-macos && echo "I\*(Aqm on a Mac"
.Ve
.SS "\s-1DESCRIPTION\s0"
.IX Subsection "DESCRIPTION"
The bashplus library defines dozens of useful Bash functions to make Bash programs much more readable.
.SS "\s-1FUNCTIONS\s0"
.IX Subsection "FUNCTIONS"
.IP "\(bu" 4
\&\f(CW\*(C`+1:x <cmd\*(C'\fR <args>...>
.Sp
Run command and send stdout to \f(CW\*(C`/dev/null\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`+2:1 <cmd\*(C'\fR <args>...>
.Sp
Run command and send stderr to stdout (\f(CW2\fR&1>).
.IP "\(bu" 4
\&\f(CW\*(C`+2:x <cmd\*(C'\fR <args>...>
.Sp
Run command and send stderr to \f(CW\*(C`/dev/null\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`+o:x <cmd\*(C'\fR <args>...>
.Sp
Run command and send stdout + stderr to \f(CW\*(C`/dev/null\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`+assert\-cmd <name\*(C'\fR>
.Sp
Die unless name is a \s-1PATH\s0 command.
.IP "\(bu" 4
\&\f(CW\*(C`+assert\-cmd\-ver <name\*(C'\fR <version>>
.Sp
Die unless name is a command at or above a given version.
.IP "\(bu" 4
\&\f(CW\*(C`+assert\-perl [<perl\-version\*(C'\fR]>
.Sp
Die unless \f(CW\*(C`perl\*(C'\fR is a command at or above a version.
.IP "\(bu" 4
\&\f(CW\*(C`+assert\-sed [<sed\-version\*(C'\fR]>
.Sp
Die unless \f(CW\*(C`perl\*(C'\fR is a command at or above a version.
.IP "\(bu" 4
\&\f(CW\*(C`+can <name\*(C'\fR>
.Sp
Die unless name is a callable function or command.
.IP "\(bu" 4
\&\f(CW\*(C`die <msg\*(C'\fR>
.Sp
Print an error message and exit with status 1.
.IP "\(bu" 4
\&\f(CW\*(C`error <msg\*(C'\fR>
.Sp
Die with message in red: \f(CW\*(C`Error: $msg\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`+is\-bash32+\*(C'\fR
.Sp
Return 1 unless current bash is version 3.2 or higher.
.IP "\(bu" 4
\&\f(CW\*(C`+is\-bash40+\*(C'\fR
.Sp
Return 1 unless current bash is version 4.0 or higher.
.IP "\(bu" 4
\&\f(CW\*(C`+is\-bash41+\*(C'\fR
.Sp
Return 1 unless current bash is version 4.1 or higher.
.IP "\(bu" 4
\&\f(CW\*(C`+is\-bash42+\*(C'\fR
.Sp
Return 1 unless current bash is version 4.2 or higher.
.IP "\(bu" 4
\&\f(CW\*(C`+is\-bash43+\*(C'\fR
.Sp
Return 1 unless current bash is version 4.3 or higher.
.IP "\(bu" 4
\&\f(CW\*(C`+is\-bash44+\*(C'\fR
.Sp
Return 1 unless current bash is version 4.4 or higher.
.IP "\(bu" 4
\&\f(CW\*(C`+is\-bash50+\*(C'\fR
.Sp
Return 1 unless current bash is version 5.0 or higher.
.IP "\(bu" 4
\&\f(CW\*(C`+is\-bash51+\*(C'\fR
.Sp
Return 1 unless current bash is version 5.1 or higher.
.IP "\(bu" 4
\&\f(CW\*(C`+is\-cmd <name\*(C'\fR>
.Sp
Return 1 unless name is a command in \s-1PATH.\s0
.IP "\(bu" 4
\&\f(CW\*(C`+is\-cmd\-ver <name\*(C'\fR <version>>
.Sp
Return 1 unless name is a command at or above a version.
.IP "\(bu" 4
\&\f(CW\*(C`+is\-file\-same <file1\*(C'\fR <file2>>
.Sp
Return 1 unless file1 and file2 have same content.
.IP "\(bu" 4
\&\f(CW\*(C`+is\-file\-diff <file1\*(C'\fR <file2>>
.Sp
Return 1 unless file1 and file2 have different content.
.IP "\(bu" 4
\&\f(CW\*(C`+is\-func <name\*(C'\fR>
.Sp
Return 1 unless name is a bash function.
.IP "\(bu" 4
\&\f(CW\*(C`+is\-online\*(C'\fR
.Sp
Return 1 unless the internet (8.8.8.8) is reachable.
.IP "\(bu" 4
\&\f(CW\*(C`+mktemp\*(C'\fR
.Sp
A wrapper around mktemp that removes the file or directory on exit. Also normalizes file permissions.
.IP "\(bu" 4
\&\f(CW\*(C`+os\-linux\*(C'\fR
.Sp
Return 1 unless running on Linux.
.IP "\(bu" 4
\&\f(CW\*(C`+os\-macos\*(C'\fR
.Sp
Return 1 unless running on macOS.
.IP "\(bu" 4
\&\f(CW\*(C`+path <path\*(C'\fR...>
.Sp
When called with no args, prints each directory in \f(CW$PATH\fR on a line. Otherwise add each path to the front of \f(CW\*(C`PATH\*(C'\fR after removing any instance of path from \f(CW\*(C`PATH\*(C'\fR.
.Sp
Can be used on any PATH-like variable, like \f(CW\*(C`MANPATH\*(C'\fR, by calling like: \f(CW\*(C`_PATH_=MANPATH +path /foo /bar\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`+sort\*(C'\fR
.Sp
Sort stdin in true code point order.
.IP "\(bu" 4
\&\f(CW\*(C`+sym [<prefix\*(C'\fR]>
.Sp
Generate a unique symbol that can safely be used an anonymous bash variable or function name.
.Sp
.Vb 3
\&    var=$(+sym)
\&    printf \-v "$var" \*(Aq%s\*(Aq \*(AqHello world\*(Aq
\&    echo "${!var}"
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`+trap <bash\-code\*(C'\fR [<signal>]>
.Sp
A wrapper around bash' \f(CW\*(C`trap\*(C'\fR that you can use multiple times. Normally there can only be one trap per signal type.
.IP "\(bu" 4
\&\f(CW\*(C`+version\-ge <version1\*(C'\fR <version2>>
.Sp
Return 1 unless version1 is greater than or equal to version2.
.IP "\(bu" 4
\&\f(CW\*(C`+version\-gt <version1\*(C'\fR <version2>>
.Sp
Return 1 unless version1 is greater than to version2.
.IP "\(bu" 4
\&\f(CW\*(C`+warn <msg\*(C'\fR>
.Sp
Print a msg to stderr.
.SS "\s-1COPYRIGHT AND LICENSE\s0"
.IX Subsection "COPYRIGHT AND LICENSE"
Copyright 2022 by Ingy do\*:t Net
.PP
This is free software, licensed under:
.PP
The \s-1MIT\s0 (X11) License
